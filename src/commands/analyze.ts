// Analyze command implementation
import chalk from 'chalk';
import ora from 'ora';
import {
  createCompetitorInstruction,
  createGapAnalysisInstruction,
  createKeywordResearchInstruction
} from '../ai/claude-integration';
import { KeywordsResearchTool } from '../core/keywords-research';
import { writeFileSync, readFileSync } from 'fs';
import path from 'path';
import { loadConfig } from '../utils/config';

interface AnalyzeCommandOptions {
  competitor?: string;
  gaps?: boolean;
  keywords?: string;
  output?: string;
}

export async function analyzeCommand(options: AnalyzeCommandOptions = {}) {
  console.log(chalk.cyan('üîç GTM Toolkit Analyzer'));

  try {
    const entryPoints = [
      { flag: '--competitor <url>', description: 'Benchmark a competitor site and extract strengths, gaps, and recommendations.' },
      { flag: '--gaps', description: 'Identify opportunities across your own content footprint.' },
      { flag: '--keywords <topic>', description: 'Generate keyword ideas (enhanced with GSC data when configured).' }
    ];

    console.log(chalk.gray('\nAvailable entry points:'));
    entryPoints.forEach(point => {
      console.log(chalk.gray(`  ‚Ä¢ ${point.flag} ‚Äî ${point.description}`));
    });

    console.log(chalk.gray('\nAI prompts generated by this command are designed for local assistants (Copilot, Cursor, Claude Desktop, etc.).'));

    const hasAction = Boolean(options.competitor || options.gaps || options.keywords);
    if (!hasAction) {
      console.log(chalk.yellow('\nTip: provide one of the flags above to trigger an analysis run.'));
      return;
    }

    // Competitor analysis
    if (options.competitor) {
      const spinner = ora(`Preparing local-AI prompt for ${options.competitor}...`).start();
      const instruction = createCompetitorInstruction(options.competitor);
      spinner.succeed('Competitor benchmarking instructions ready');
      const output = JSON.stringify(instruction, null, 2);
      if (options.output) {
        writeFileSync(options.output, output);
        console.log(chalk.green(`Instructions saved to ${options.output}`));
      } else {
        console.log(output);
      }
    }

    // Content gaps analysis
    if (options.gaps) {
      const spinner = ora('Preparing content gap prompt...').start();
      const instruction = createGapAnalysisInstruction([], []);
      spinner.succeed('Gap analysis instructions ready');
      console.log(JSON.stringify(instruction, null, 2));
    }

    // Keywords research
    if (options.keywords) {
      const spinner = ora('Researching keywords...').start();
      let config;
      try {
        config = await loadConfig();
      } catch (error) {
        spinner.fail('Failed to load GTM Toolkit configuration.');
        console.error(chalk.red((error as Error).message));
        return;
      }

      const gscConfig = config.analytics?.gsc;
      if (!gscConfig?.enabled || !gscConfig.credentialsPath) {
        spinner.fail('Google Search Console credentials required for keyword research.');
        console.log(chalk.yellow('Connect your Search Console JSON via analytics.gsc in gtm.config.js, then rerun `gtm-toolkit analyze --keywords <topic>`.'));
        return;
      }

      const siteUrl = gscConfig.siteUrl || config.seo.siteUrl;

      let credentials;
      try {
        credentials = JSON.parse(readFileSync(path.resolve(gscConfig.credentialsPath), 'utf8'));
      } catch (error) {
        spinner.fail('Failed to read Google Search Console credentials JSON.');
        console.error(chalk.red((error as Error).message));
        return;
      }

      const keywordsTool = new KeywordsResearchTool({
        siteUrl,
        gscCredentials: credentials,
        aiAssistantKey: config.ai?.apiKey
      });

      try {
        const endDate = new Date();
        const startDate = new Date(Date.now() - 28 * 24 * 60 * 60 * 1000);
        const gscKeywords = await keywordsTool.getCurrentKeywordPerformance({
          startDate: startDate.toISOString().split('T')[0],
          endDate: endDate.toISOString().split('T')[0],
          dimensions: ['query'],
          rowLimit: 50
        });
        const aiKeywords = await keywordsTool.researchKeywordsWithAI(
          options.keywords,
          'developers and marketers'
        );
        
        spinner.succeed('Keywords research complete');
        console.log(JSON.stringify({
          siteUrl,
          window: {
            start: startDate.toISOString().split('T')[0],
            end: endDate.toISOString().split('T')[0]
          },
          gscTopQueries: gscKeywords.slice(0, 20),
          aiSuggestions: aiKeywords
        }, null, 2));
      } catch (error) {
        spinner.fail('Failed to fetch keywords from Google Search Console.');
        console.error(chalk.red((error as Error).message));
        return;
      }

      const instruction = createKeywordResearchInstruction(options.keywords, 'developers and marketers');
      console.log(chalk.gray('\nLocal AI prompt suggestion:'));
      console.log(JSON.stringify(instruction, null, 2));
    }

  } catch (error) {
    console.error(chalk.red('‚ùå Analysis failed:'), error);
  }
}
